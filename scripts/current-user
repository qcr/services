#!/bin/bash
#
#
# Prints the username of the current configuration used

#################
### VARIABLES ###
#################

# The name of this script, and the directory where it is located
SCRIPT_NAME="$(basename $(readlink -f $0))"
SCRIPT_DIR="$(dirname $(readlink -f $0))"


#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nPrints the username of the current configuration used.
    
Usage:
    current [-f|--file-loc] [-h|--help] [-T|--testing] 

Input Arguments:
    -f|--file-loc   Print the file location of the current configuration file too.
    -h|--help       Prints this help menu.
    -T|--testing    Runs the script in a test mode by prepending all paths and setting the current user to test.

"
}


############
### MAIN ###
############

# Source common components
source ${SCRIPT_DIR}/common

# Parse Arguments
TESTING=false
PRINT_CONFIG_FILE_LOC=false
PARSED_ARGS=$(getopt -a -n ${SCRIPT_NAME} -o 'fT' --long 'file-loc,testing' -- "$@")
eval set -- "${PARSED_ARGS}"
while true; do
    case "$1" in 
        -f|--file-loc) PRINT_CONFIG_FILE_LOC=true; shift ;;
        -h|--help) print_usage; exit 0 ;;
        -T|--testing) TESTING=true; shift 1 ;;
        # -- indicates end of arguments, break while loop
        --) shift; break ;;
        # invalid option was passed, print usage
        *)
        printf "${ERROR}Unrecognized option '$1'\n" 
        print_usage 
        exit 1 ;;    
    esac
done

# Testing - prepend paths and set user
if [ ${TESTING} == true ]; then
    # Get path to testing directory
    TEST_DIR=$(_get_test_dir)

    # Set variables
    CURRENT_CONFIG=${TEST_DIR}/${CURRENT_CONFIG}
    
    printf "${YELLOW}Running script in test mode. Creating test file structure.${RESET}\n\n"
    _create_test_folder_structure ${TEST_DIR}
fi

# Check if file exists
if [ ! -e ${CURRENT_CONFIG} ]; then
    echo "${WARNING} User Not Set"
    exit
fi

# Get filenames of services to list
count=0
while read -r line; do
    if [ ${count} -eq 1  ]; then
        if [ ${PRINT_CONFIG_FILE_LOC} == true ]; then
            echo ${line}
        fi
    else
        echo ${line}
    fi
    count+=1

done < ${CURRENT_CONFIG}

