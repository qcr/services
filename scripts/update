#!/bin/bash
#
#
# Sets the default services to the current user configuration


#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nSets the default services based on the current user configuration. Must be run
    whenever a services configuration file is updated.
    
Usage:
    ./update -T -c <command_file> -f <config_file> -S <config_file_symlink> -P <service_path> -u <service_user>

Input Arguments:
    -c <command_file>           The file where generated commands should be stored. Defaults to /tmp/ros-service-commands
    -f <config_file>            The config file to use for service configuration. Defaults to /home/<service_user>/.qcr/ros-service-config.yml. Providing this argument will set the config file path irrespective of the argument provided as the service_user.
    -S <config_file_symlink>    The location where a symlink is created to store the currently used configuration file. Defaults to /etc/qcr/ros-service-config.yml
    -P <service_path>           The path to where systemd service files are stored. Defaults to /etc/systemd/system
    -u <service_user>           The username of the configuration file to be used. The username will also be added to each generated service. Defaults to the current user.
    -T                          Runs the script in a test mode by prepending all paths and setting the current user to test. No changes to the system services will actually occur.

Example Usage:
    Use your service configuration: ./update
    Use the qcr user's service configuration: ./update -u qcr

"
}

function _run_systemctl_commands() {
    while read -r sys_cmd; do
        # Get name of service and check file exists before running command
        srv="$(echo ${sys_cmd} | cut -d' ' -f4)"
        if [ -e ${SERVICE_PATH}/${srv}.service ]; then
            eval ${sys_cmd}
        fi
    done < "$1"
}


############
### MAIN ### 
############

# Source common components
source common

# Parse Arguments
TESTING=false
CONFIG_FILE_PROVIDED=false

while getopts c:f:S:P:p:u:T OPT; do
    case "${OPT}" in
        c) COMMAND_FILE=${OPTARG} ;;
        f) CONFIG_FILE=${OPTARG}; CONFIG_FILE_PROVIDED=true ;;
        S) CONFIG_FILE_SYMLINK=${OPTARG} ;;
        P) SERVICE_PATH=${OPTARG} ;;
        u) SERVICE_USER=${OPTARG} ;;
        T) TESTING=true ;;
        ?) print_usage; exit ;;
    esac
done

# Set service user to test if testing
if [ ${TESTING} == true ]; then
    SERVICE_USER="test"
fi

# Create path to config file - based on config_file and service_user arguments
if [ ${CONFIG_FILE_PROVIDED} == false ]; then
    CONFIG_FILE="/home/${SERVICE_USER}/.qcr/service-config.yml"
fi


# Testing - prepend paths and set user
if [ ${TESTING} == true ]; then
    # Get path to testing directory
    TEST_DIR=$(_get_test_dir)

    # Set variables
    COMMAND_FILE=${TEST_DIR}/${COMMAND_FILE}
    CONFIG_FILE=${TEST_DIR}/${CONFIG_FILE}
    CONFIG_FILE_SYMLINK=${TEST_DIR}/${CONFIG_FILE_SYMLINK}
    CURRENT_CONFIG=${TEST_DIR}/${CURRENT_CONFIG}
    SERVICE_PATH=${TEST_DIR}/${SERVICE_PATH}   

    printf "${YELLOW}Running script in test mode. Creating test file structure.${NORMAL}\n\n"
    _create_test_folder_structure ${TEST_DIR}
fi


# Check to see if configuration file exists
if [ ! -e ${CONFIG_FILE} ]; then
    printf "${RED}Error${NORMAL} - the configuration file (${CONFIG_FILE}) does not exit. It is recommended you create a configuration file based on the default config. Use the 'new' command.\n"
    exit 1
fi

# Check to see if previous symlink exists
if [ -e ${CONFIG_FILE_SYMLINK} ]; then

    # Create list of commands to disable all services for current configuration
    printf "Disabling current services.\n"
    bash -c "python3 create_enable_services_list.py -D -c ${COMMAND_FILE} -f ${CONFIG_FILE_SYMLINK} -u ${SERVICE_USER}"

    # Run commands - if not testing
    if [ ${TESTING} == false ]; then
        _run_systemctl_commands $COMMAND_FILE
    fi
fi

# Set new configuration file
printf "Setting new configuration file.\n"
sudo ln -fs ${CONFIG_FILE} ${CONFIG_FILE_SYMLINK}

# Create new service files for new configuration
printf "Generating new and updated service files.\n"
sudo -E bash -c "python3 create_service_files.py -f ${CONFIG_FILE_SYMLINK} -P ${SERVICE_PATH} -u ${SERVICE_USER}"

# Create list of commands to enable/disable services for current configuration
printf "Enabling/disabling required services.\n"
bash -c "python3 create_enable_services_list.py -c ${COMMAND_FILE} -f ${CONFIG_FILE_SYMLINK}  -u ${SERVICE_USER}"

# Run commands - if not testing
if [ ${TESTING} == false ]; then
    _run_systemctl_commands $COMMAND_FILE
fi

# Store current user and config file location
touch ${CURRENT_CONFIG}
echo ${SERVICE_USER} > ${CURRENT_CONFIG}
echo ${CONFIG_FILE} >> ${CURRENT_CONFIG}
