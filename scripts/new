#!/bin/bash
#
#
# Creates a new user configuration based on the system default.

#################
### VARIABLES ###
#################

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nCopies the default service configuration to the current user workspace.
    
Usage:
    ./new -T -f <config_file> -d <default_config_file>

Input Arguments:
    -f <config_file>            The location where the new config file is to be stored. Defaults to /home/<current-user>/.qcr/ros-service-config.yml
    -d <default_config_file>    The location to where the default config file. Defaults to /etc/qcr/ros-service-config_default.yml
    -T                          Runs the script in a test mode by prepending all paths and setting the current user to test.
"
}


############
### MAIN ### 
############

# Source common components
source ${SCRIPT_DIR}/common

# Parse Arguments
TESTING=false

while getopts f:dTh OPT; do
    case "${OPT}" in
        f) CONFIG_FILE=${OPTARG} ;;
        d) DEFAULT_CONFIG_FILE=${OPTARG} ;;
        T) TESTING=true ;;
        h) print_usage; exit ;;
        ?) print_usage; exit ;;
    esac
done

# Testing - prepend paths and set user
if [ ${TESTING} == true ]; then
    # Get path to testing directory
    TEST_DIR=$(_get_test_dir)

    # Set variables
    CONFIG_FILE=${TEST_DIR}/home/test/.qcr/service-config.yml
    DEFAULT_CONFIG_FILE=${TEST_DIR}/${DEFAULT_CONFIG_FILE}

    printf "${YELLOW}Running script in test mode. Creating test file structure.${NORMAL}\n\n"
    _create_test_folder_structure ${TEST_DIR}
fi


# Check directory exists
config_dir=$(dirname ${CONFIG_FILE})
if [ ! -d ${config_dir} ]; then
    echo "${INFO} Creating directory ${config_dir}"
    mkdir -p "${config_dir}"
fi

# Check if config already exists
if [ -e ${CONFIG_FILE} ]; then
    printf "${ERROR} User Configuration File Already Exists at ${CONFIG_FILE}.\n"
    printf "Please delete this file and then re-run this command.\n"
    exit 1
fi

# Check if default exists
if [ ! -e ${DEFAULT_CONFIG_FILE} ]; then
    printf "${INFO} No Default Configuration Exists, creating empty default configuration.\n"

    touch ${DEFAULT_CONFIG_FILE}
    echo -e "# Example structure for services configuration file
- name: service-1
  description: Service 1 Description
  catkin_ws: /opt/ros/noetic/setup.bash
  parent: ros-watchdog.service
  command: echo Service 1 Hook
  enabled: True
  restart: True
  restart_after: 5

- name: service-2
  description: Service 1 Description
  parent: ros-watchdog.service
  command: echo Service 2 Hook
  enabled: False


" > ${DEFAULT_CONFIG_FILE}
    
fi

cp ${DEFAULT_CONFIG_FILE} ${CONFIG_FILE}
printf "${INFO} Copied Default Configuration - User configuration file at ${CONFIG_FILE}\n"
printf  "${INFO} Make changes to this file and then run update to set this as the default service configuration.\n"