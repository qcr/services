#!/bin/bash
#
#
# List the services, whether they are enabled/disabled, and their status

#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nLists the common and user specific QCR ROS services for the given user, whether they are enabled/disabled, and their status.
    
Usage:
    ./list -u <service_user> -i -a -d

Input Arguments:
    -u <user>   The user services to list. Defaults to the current user.
    -i          Ignore the common QCR services.
    -a          List all system services.
    -d          List disabled services. 

Examples:
    List all generic and user sepcific services for the current user: ./list
    List all generic and user sepcific services for the current user: ./list -q sys
    List all only the user sepcific services for the current user: ./list -i
    List all system services: ./list -a 
"
}


############
### MAIN ###
############

# Source common components
source common

# Parse Arguments
IGN_COMMON_ROS_SRVS=false
LIST_ALL_SRVS=false
LIST_DISABLED_SRVS=false
while getopts u:iadh OPT; do
    case "${OPT}" in
        u) SERVICE_USER=${OPTARG} ;;
        i) IGN_COMMON_ROS_SRVS=true ;;
        a) LIST_ALL_SRVS=true ;;
        d) LIST_DISABLED_SRVS=true ;;
        ?) print_usage; exit ;;
    esac
done

# Get filenames of services to list
if [ ${LIST_ALL_SRVS} == true ]; then
    # Get all service files
    SERVICE_FILES=${SERVICE_PATH}/*.service
else
    # Get only service files with user at the end of the filename
    SERVICE_FILES=${SERVICE_PATH}/*${SERVICE_USER}.service
    
    # Prepend common QCR ROS services to array if required
    COMMON_ROS_SRVS=("${SERVICE_PATH}/ros.service" "${SERVICE_PATH}/roscore.service" "${SERVICE_PATH}/ros-watchdog.service" "${SERVICE_PATH}/robot-bringup.service" "${SERVICE_PATH}/qut-iaclient.service")
    if [ ${IGN_COMMON_ROS_SRVS} == false ]; then
        SERVICE_FILES=( "${COMMON_ROS_SRVS[@]}" "${SERVICE_FILES[@]}" )
    fi
fi

# Loop through services printing name, enabled/disabled, and status
printf "Check full service status via command 'sudo systemctl status <service-name>'\n\n"
printf "%-40s %-15s %s\n" "SERVICE" "ACTIVE" "STATUS"
printf "%-40s %-15s %s\n" "-------" "------" "------"

# List services
for f in ${SERVICE_FILES[@]}; do
    # Check service exists
    if [ ! -e ${f} ]; then
        continue
    fi

    # Get service name, status, then print
    srvname="$(basename $f .service)"
    status=$(systemctl is-active $srvname)
    case "$status" in
        ("activating") printf "%-40s %-15s %s\n" "$srvname" "Enabled" "${YELLOW}Activating${NORMAL}" ;;
        ("active") printf "%-40s %-15s %s\n" "$srvname" "Enabled" "${GREEN}Running${NORMAL}" ;;
        ("failed") printf "%-40s %-15s %s\n" "$srvname" "Enabled" "${RED}Failed${NORMAL}" ;;
        ("inactive") 
            if [ ${LIST_DISABLED_SRVS} == true ]; then  
                printf "%-40s %-15s %s\n" "$srvname" "Disabled" "Disabled"
            fi ;;
    esac
done

