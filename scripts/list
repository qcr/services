#!/bin/bash
#
#
# List the services, whether they are enabled/disabled, and their status

#################
### VARIABLES ###
#################

# The name of this script, and the directory where it is located
SCRIPT_NAME="$(basename $(readlink -f $0))"
SCRIPT_DIR="$(dirname $(readlink -f $0))"

#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nLists the common and user specific QCR ROS services for the given user, whether they are enabled/disabled, and their status.
    
Usage:
    list [-h|--help] [-i|--ignore-qcr] [-a|--list-all] [-d|--list-disabled] [-u|--user <user>]

Input Arguments:
    -a|--list-all       List all system services.
    -d|--list-disabled  List disabled services. 
    -i|--ignore-qcr     Ignore the common QCR services.
    -h|--help           Show this help menu.
    -u|--user <user>    The user services to list. Defaults to the current user.

Examples:
    List all generic and user sepcific services for the current user: ./list
    List all generic and user sepcific services for the current user: ./list -q sys
    List all only the user sepcific services for the current user: ./list -i
    List all system services: ./list -a 
"
}


############
### MAIN ###
############

# Set shell options, enter help set in terminal for definitions
set -o pipefail

# Source common components
source ${SCRIPT_DIR}/common


# Parse Arguments
IGN_QCR_SRVS=false
LIST_ALL_SRVS=false
LIST_DISABLED_SRVS=false
PARSED_ARGS=$(getopt -a -n ${SCRIPT_NAME} -o 'adihu:' --long 'list-all,list-disabled,ignore-qcr,help,user:' -- "$@")
eval set -- "${PARSED_ARGS}"
while true; do
    case "$1" in 
        -a|--list-all) LIST_ALL_SRVS=true; shift ;;
        -d|--list-disabled) LIST_DISABLED_SRVS=true; shift ;;
        -i|--ignore-qcr) IGN_QCR_SRVS=true; shift ;;
        -h|--help) print_usage; exit 0 ;;
        -u|--user) SERVICE_USER=$2; shift 2 ;;
        # -- indicates end of arguments, break while loop
        --) shift; break ;;
        # invalid option was passed, print usage
        *)
        printf "${ERROR}Unrecognized option '$1'\n" 
        print_usage 
        exit 1 ;;    
    esac
done


# Get filenames of services to list
if [ ${LIST_ALL_SRVS} == true ]; then
    # Get all service files
    SERVICE_FILES=${SERVICE_PATH}/*.service
else
    # Get only service files with user at the end of the filename
    SERVICE_FILES=${SERVICE_PATH}/*${SERVICE_USER}.service
    
    # Prepend common QCR ROS services to array if required
    COMMON_ROS_SRVS=("${SERVICE_PATH}/ros.service" "${SERVICE_PATH}/roscore.service" "${SERVICE_PATH}/ros-watchdog.service" "${SERVICE_PATH}/robot-bringup.service" "${SERVICE_PATH}/qut-iaclient.service")
    if [ ${IGN_QCR_SRVS} == false ]; then
        SERVICE_FILES=( "${COMMON_ROS_SRVS[@]}" "${SERVICE_FILES[@]}" )
    fi
fi

# Loop through services printing name, enabled/disabled, and status
printf "Check full service status via command 'systemctl status <service-name>'\n\n"
printf "%-40s %-15s %s\n" "SERVICE" "ACTIVE" "STATUS"
printf "%-40s %-15s %s\n" "-------" "------" "------"

# List services
for f in ${SERVICE_FILES[@]}; do
    # Check service exists
    if [ ! -e ${f} ]; then
        continue
    fi

    # Get service name, status, then print
    srvname="$(basename $f .service)"
    status=$(systemctl is-active $srvname)
    case "$status" in
        ("activating") printf "%-40s %-15s ${YELLOW}%s${RESET}\n" "$srvname" "Enabled" "Activating" ;;
        ("active") printf "%-40s %-15s ${GREEN}%s${RESET}\n" "$srvname" "Enabled" "Running" ;;
        ("failed") printf "%-40s %-15s ${RED}%s${RESET}\n" "$srvname" "Enabled" "Failed" ;;
        ("inactive") 
            if [ ${LIST_DISABLED_SRVS} == true ]; then  
                printf "%-40s %-15s %s\n" "$srvname" "Disabled" "Disabled"
            fi ;;
    esac
done

